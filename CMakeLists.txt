#
#  Copyright (C) 2020-2024 Embedded AMS B.V. - All Rights Reserved
#
#  This file is part of Embedded Proto.
#
#  Embedded Proto is open source software: you can redistribute it and/or 
#  modify it under the terms of the GNU General Public License as published 
#  by the Free Software Foundation, version 3 of the license.
#
#  Embedded Proto  is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Embedded Proto. If not, see <https://www.gnu.org/licenses/>.
#
#  For commercial and closed source application please visit:
#  <https://EmbeddedProto.com/license/>.
#
#  Embedded AMS B.V.
#  Info:
#    info at EmbeddedProto dot com
#
#  Postal address:
#    Atoomweg 2
#    1627 LE, Hoorn
#    the Netherlands
#

cmake_minimum_required(VERSION 3.5)

project(test_EmbeddedProto)


###############################################################################
# Automatically find all proto files
file(GLOB_RECURSE PROTO_FILES "${CMAKE_SOURCE_DIR}/test/proto/*.proto")

# Create the output folder for the code generated by Embedded Proto.
set(PROTO_GEN_DIR ${CMAKE_SOURCE_DIR}/build/EAMS)
file(MAKE_DIRECTORY ${PROTO_GEN_DIR})

# Include the source code template files in the dependencies such that when the templates change 
# the code is regenerated.
file(GLOB_RECURSE TEMPLATE_FILES "${CMAKE_SOURCE_DIR}/EmbeddedProto/templates/*.h.jinja2")

# Create a custom target for generating the protobuf files with the Embedded Proto plugin
foreach(PROTO_FILE ${PROTO_FILES})
    get_filename_component(PROTO_FILE_NAME ${PROTO_FILE} NAME_WE)
    add_custom_command(
        OUTPUT ${PROTO_GEN_DIR}/${PROTO_FILE_NAME}.h
        COMMAND protoc --plugin=protoc-gen-eams=${CMAKE_SOURCE_DIR}/protoc-gen-eams -I${CMAKE_SOURCE_DIR}/EmbeddedProto -I${CMAKE_SOURCE_DIR}/test/proto --eams_out=${PROTO_GEN_DIR} ${PROTO_FILE}
        DEPENDS ${PROTO_FILE} ${TEMPLATE_FILES}
        COMMENT "Running EAMS plugin on ${PROTO_FILE}"
        VERBATIM
    )

    # Create a list with generated files for the dependencie list of the custom target.
    list(APPEND GENERATED_FILES ${PROTO_GEN_DIR}/${PROTO_FILE_NAME}.h)
endforeach()

# Create the custom target to generate source code usign the Embedded Proto plugin.
add_custom_target(generate_protobuf ALL DEPENDS ${GENERATED_FILES})

###############################################################################
# When desired for debugging we can generate python protobuf files.

set(PROTO_GEN_PYTHON_DIR ${CMAKE_SOURCE_DIR}/build/python)
file(MAKE_DIRECTORY ${PROTO_GEN_PYTHON_DIR})

foreach(PROTO_FILE ${PROTO_FILES})
    get_filename_component(PROTO_FILE_NAME ${PROTO_FILE} NAME_WE)
    add_custom_command(
        OUTPUT ${PROTO_GEN_PYTHON_DIR}/${PROTO_FILE_NAME}_pb2.py
        COMMAND protoc -I${CMAKE_SOURCE_DIR}/test/proto -I${CMAKE_SOURCE_DIR}/EmbeddedProto --python_out=${PROTO_GEN_PYTHON_DIR} ${PROTO_FILE}
        DEPENDS ${PROTO_FILE} ${TEMPLATE_FILES}
        COMMENT "Generating python code for ${PROTO_FILE}"
        VERBATIM
    )
    list(APPEND GENERATED_PYTHON_FILES ${PROTO_GEN_PYTHON_DIR}/${PROTO_FILE_NAME}_pb2.py)
endforeach()

add_custom_target(generate_python_protobuf ALL DEPENDS ${GENERATED_PYTHON_FILES})



###############################################################################
# Start building the unit tests

set(CMAKE_CXX_FLAGS "-std=c++11 -Wall") #-fprofile-arcs -ftest-coverage")
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)

add_subdirectory(external/googletest)

file(GLOB src_files
    "src/*.cpp"
    "test/*.cpp"
    "build/EAMS/*.cpp"
)

include_directories(test test/mock src build/EAMS)
include_directories(external/googletest/googletest external/googletest/googletest/include
                    external/googletest/googlemock external/googletest/googlemock/include)

add_executable(test_EmbeddedProto ${src_files})
add_dependencies(test_EmbeddedProto generate_protobuf generate_python_protobuf)
target_link_libraries(test_EmbeddedProto gtest gmock)

